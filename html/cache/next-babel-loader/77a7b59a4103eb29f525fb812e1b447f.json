{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useRef } from 'react';\nimport Head from 'next/head';\nimport Layout from '../components/layout';\nimport useSWR from 'swr';\nimport Link from 'next/link';\nimport PlaylistDetails from '../components/playlist-details';\nimport Summary from '../components/summary';\nimport Playlist from '../components/playlist';\nimport { ScrollProvider } from '../components/scrollContext';\nimport { positions, skills, projects } from '../data';\nimport { GridPlaylist, GridLinks, Container } from '../styles/grid';\nimport * as S from '../styles/pages';\nimport { filter } from 'lodash';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n\n            if (!(res.status !== 200)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(data.message);\n\n          case 8:\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar Playlists = function Playlists() {\n  var _useState = useState(null),\n      active = _useState[0],\n      setActive = _useState[1];\n\n  var _useSWR = useSWR(function () {\n    return \"/api/spotify\";\n  }, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  var handleChange = function handleChange(pid) {\n    setActive(active === pid ? null : pid);\n  };\n\n  return __jsx(ScrollProvider, null, __jsx(Head, null, __jsx(\"title\", null, \"Michael Weitzman\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"A collection of personal playlists on Spotify. Back when I ran band websites for a living and DJ'd local bars, I made mothly playlists of the music I found on Blogs, KXLU, KCRW, Pirate Radio, and more. A lot of that stuff is still sitting in an old iTunes library, but I flipped to digital.  It's the closest thing I have to a journal, so here it is.\"\n  })), __jsx(Layout, null, __jsx(PlaylistDetails, {\n    close: function close() {\n      return setActive(null);\n    },\n    pid: active || null\n  }), __jsx(Container, null, __jsx(GridPlaylist, null, !data ? 'loading...' : error ? 'Uh oh...' : data.map(function (pid, i) {\n    return __jsx(S.PlaylistWrap, {\n      $active: active === pid,\n      key: pid\n    }, __jsx(Playlist, {\n      handler: handleChange,\n      active: pid === active,\n      key: i,\n      pid: pid\n    }));\n  })))));\n};\n\nexport default Playlists;","map":null,"metadata":{},"sourceType":"module"}