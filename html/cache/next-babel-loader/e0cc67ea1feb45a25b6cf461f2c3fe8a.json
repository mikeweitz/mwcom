{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as S from './styled-elements';\nimport Link from 'next/link';\nimport useSWR from 'swr';\nimport { THEME } from '../../styles/theme';\nimport { Close } from '../icons';\nimport { useScrollContext } from '../scrollContext';\nconst {\n  colors\n} = THEME;\n\nconst fetcher = async url => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  if (res.status !== 200) {\n    throw new Error(data.message);\n  }\n\n  return data;\n};\n\nconst PlaylistDetails = ({\n  pid,\n  playlist,\n  close\n}) => {\n  const scroll = useScrollContext();\n  const scrollRef = useRef(null);\n  const {\n    data,\n    error\n  } = useSWR(!pid ? null : () => `/api/spotify/${pid}`, fetcher);\n  const {\n    0: hoverClose,\n    1: setHoverClose\n  } = useState(false);\n  useEffect(() => {\n    if (scrollRef && scrollRef.current) {\n      scrollRef.current.scrollTop = 0;\n    }\n  }, [pid]);\n  const {\n    images,\n    name,\n    tracks,\n    external_urls\n  } = data || {};\n  return __jsx(S.Drawer, {\n    $scrolled: scroll.isScrolled,\n    $scrolling: scroll.scrolling,\n    $active: pid\n  }, __jsx(S.Section, {\n    id: \"playlist-details\",\n    $scrolled: scroll.isScrolled,\n    $active: pid\n  }, error || !data ? null : __jsx(S.ScrollContainer, {\n    ref: scrollRef\n  }, __jsx(S.Meta, null, __jsx(\"a\", {\n    href: external_urls.spotify,\n    target: \"spotify\"\n  }, __jsx(S.PlistName, null, name))), __jsx(S.Cover, null, __jsx(\"a\", {\n    href: external_urls.spotify,\n    target: \"spotify\"\n  }, __jsx(S.CoverImg, {\n    src: images[0].url\n  }))), __jsx(S.Songs, null, __jsx(S.TrackList, null, tracks.items.map(t => {\n    console.log(t);\n    return __jsx(S.Track, {\n      key: t.sharing_info.share_id\n    }, __jsx(S.TrackLink, {\n      href: t.track.external_urls.api,\n      target: \"spotify\"\n    }, __jsx(\"strong\", null, t.track.name), __jsx(\"br\", null), t.track.artists.map(a => {\n      return __jsx(S.Artist, {\n        key: `${pid}_${a.id}`\n      }, a.name);\n    })));\n  }))), __jsx(S.Action, null, __jsx(S.Go, {\n    href: external_urls.spotify,\n    target: \"spotify\"\n  }, 'Listen on Spotify')))), __jsx(S.Close, {\n    $active: pid,\n    onClick: close,\n    onMouseEnter: () => setHoverClose(true),\n    onMouseLeave: () => setHoverClose(false)\n  }, __jsx(S.Icon, null, __jsx(Close, {\n    alt: \"Close\",\n    width: \"50%\",\n    height: \"auto\",\n    fill: hoverClose && colors.heliotrope\n  }))));\n};\n\nexport default PlaylistDetails;","map":null,"metadata":{},"sourceType":"module"}