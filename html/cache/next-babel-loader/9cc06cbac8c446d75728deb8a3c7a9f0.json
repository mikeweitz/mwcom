{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { styled, withStyle } from 'styletron-react';\nimport { THEME } from './theme';\nconst {\n  breakpoints: {\n    tablet,\n    tabletLarge,\n    desk,\n    wide,\n    max,\n    print\n  },\n  colors\n} = THEME;\nexport const Container = styled('div', ({\n  $pageBreak\n}) => _objectSpread({\n  position: 'relative',\n  maxWidth: '90%',\n  margin: '0 auto',\n  width: '100%',\n  [desk]: {\n    width: '90%',\n    maxWidth: '1440px'\n  }\n}, $pageBreak ? {\n  [print]: {\n    pageBreakAfter: 'always'\n  }\n} : {}));\nexport const GridFlex = styled('div', {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'flex-start',\n  justifyContent: 'flex-start',\n  marginLeft: '-1em',\n  marginRight: '-1em',\n  flexWrap: 'wrap'\n});\nexport const Grid = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(1, 1fr)',\n  gridAutoFlow: 'row',\n  gridGap: '20px',\n  justifyContent: 'center',\n  [tablet]: {\n    gridGap: '32px',\n    gridTemplateColumns: 'repeat(2, 1fr)'\n  },\n  [tabletLarge]: {\n    gridGap: '32px',\n    gridTemplateColumns: 'repeat(3, 1fr)'\n  },\n  [desk]: {\n    maxWidth: '1440px',\n    gridTemplateColumns: 'repeat(3, 1fr)',\n    gridGap: '24px'\n  },\n  [print]: {\n    display: 'block'\n  }\n});\nexport const GridPlaylist = withStyle(Grid, {\n  gridTemplateColumns: 'repeat(2, 1fr)',\n  gridGap: '38px',\n  [tablet]: {\n    gridGap: '32px',\n    gridTemplateColumns: 'repeat(3, 1fr)'\n  },\n  [tabletLarge]: {\n    gridTemplateColumns: 'repeat(4, 1fr)'\n  },\n  [desk]: {\n    maxWidth: '1440px',\n    gridTemplateColumns: 'repeat(5, 1fr)',\n    gridGap: '64px'\n  }\n});\nexport const GridLinks = styled('div', {\n  display: 'grid',\n  gridTemplateColumns: 'repeat(1, 1fr)',\n  gridAutoFlow: 'row',\n  gridGap: '32px',\n  [tablet]: {\n    gridTemplateColumns: 'repeat(2, 1fr)'\n  },\n  [tabletLarge]: {\n    gridTemplateColumns: 'repeat(2, 1fr)'\n  },\n  [desk]: {\n    maxWidth: '1440px',\n    gridTemplateColumns: 'repeat(2, 1fr)',\n    gridGap: '24px'\n  },\n  [print]: {\n    display: 'block'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}