{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useLayoutEffect } from 'react';\nimport { throttle } from 'lodash';\nconst isBrowser = false;\nconst useIsomorphicEffect = isBrowser ? useLayoutEffect : useEffect;\n\nconst getScroll = () => ({\n  x: isBrowser ? window.scrollX : 0,\n  y: isBrowser ? window.scrollY : 0,\n  isScrolled: false\n});\n\nconst ScrollContext = React.createContext();\n\nfunction useScrollContext() {\n  const context = React.useContext(ScrollContext);\n\n  if (context === undefined) {\n    throw new Error('useScrollContext must be used within a ScrollProvider');\n  }\n\n  return context;\n}\n\nconst ScrollProvider = ({\n  children,\n  scrollThreshold = 50\n}) => {\n  const {\n    0: scroll,\n    1: setScroll\n  } = useState({\n    x: 0,\n    y: 0,\n    isScrolled: false,\n    scrolling: false\n  });\n  useIsomorphicEffect(() => {\n    if (!isBrowser) {\n      return;\n    }\n\n    let timer = null;\n    const delay = 250;\n    const handleScroll = throttle(() => {\n      clearTimeout(timer);\n      const coords = getScroll();\n\n      const newScroll = _objectSpread(_objectSpread({}, coords), {}, {\n        isScrolled: Math.abs(coords.y) > scrollThreshold,\n        scrolling: true\n      });\n\n      setScroll(_objectSpread({}, newScroll));\n      timer = setTimeout(() => {\n        setScroll(_objectSpread(_objectSpread({}, newScroll), {}, {\n          scrolling: false\n        }));\n      }, delay + 10);\n    }, delay, {\n      leading: true\n    });\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n  return __jsx(ScrollContext.Provider, {\n    value: scroll\n  }, children);\n};\n\nexport { ScrollProvider, useScrollContext };","map":null,"metadata":{},"sourceType":"module"}