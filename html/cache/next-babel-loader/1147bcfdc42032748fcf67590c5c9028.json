{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport * as S from './styled-elements';\n\nclass Position extends Component {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"state\", {\n      hover: false\n    });\n\n    _defineProperty(this, \"handleMouseEnter\", () => {\n      this.setState({\n        hover: true\n      });\n    });\n\n    _defineProperty(this, \"handleMouseLeave\", () => {\n      this.setState({\n        hover: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      role,\n      company,\n      dates,\n      responsibilities,\n      skills\n    } = this.props;\n    const {\n      hover\n    } = this.state;\n    return !role ? null : __jsx(S.Position, {\n      className: \"position\",\n      onMouseEnter: this.handleMouseEnter,\n      onMouseLeave: this.handleMouseLeave\n    }, __jsx(S.Role, {\n      $hover: hover\n    }, role), __jsx(S.Organization, null, company), __jsx(S.Dates, null, dates.start, dates.end && ` - ${dates.end}`), __jsx(S.Subhead, null, \"Key attributes and responsibilities\"), __jsx(S.List, null, responsibilities.length > 0 && responsibilities.map((item, i) => __jsx(\"li\", {\n      key: `role-actions_${i}`\n    }, item))), skills && skills.length > 0 && __jsx(React.Fragment, null, __jsx(S.Subhead, null, \"Primary skill utilization\"), __jsx(\"ul\", null, skills.map((item, i) => __jsx(\"li\", {\n      key: `${company}-${role}-skills_${i}`\n    }, item)))));\n  }\n\n}\n\n_defineProperty(Position, \"defaultProps\", {\n  role: 'Title',\n  company: 'Company Name',\n  dates: {\n    start: 'Month, Year',\n    end: 'Month, Year'\n  },\n  responsibilities: [],\n  skills: []\n});\n\nexport default Position;","map":null,"metadata":{},"sourceType":"module"}