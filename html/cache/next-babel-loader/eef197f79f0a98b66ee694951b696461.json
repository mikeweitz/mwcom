{"ast":null,"code":"var __jsx = React.createElement;\n// @flow\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport * as S from './styled-elements';\nimport useSWR from 'swr';\nimport Link from 'next/link';\n\nconst fetcher = async url => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  if (res.status !== 200) {\n    throw new Error(data.message);\n  }\n\n  return data;\n};\n\nexport default function Playlist({\n  pid,\n  active,\n  handler\n}) {\n  if (!pid) {\n    return null;\n  }\n\n  const {\n    0: hover,\n    1: setHover\n  } = useState(active);\n  const ref = useRef(null);\n\n  const touchStart = e => {\n    setHover(true);\n    e.stopPropagation();\n  };\n\n  const touchEnd = e => {\n    setHover(false);\n    e.stopPropagation();\n  };\n\n  const touchMove = e => {\n    e.stopPropagation();\n  };\n\n  const onClick = () => {\n    handler(pid);\n  };\n\n  const {\n    data,\n    error\n  } = useSWR(() => `/api/spotify/${pid}`, fetcher);\n  useEffect(() => {\n    if (ref && ref.current && typeof ref.current !== null) {\n      ref.current.addEventListener('touchstart', touchStart);\n      ref.current.addEventListener('touchmove', touchMove);\n      ref.current.addEventListener('touchend', touchEnd);\n      ref.current.addEventListener('click', onClick);\n      return () => {\n        ref.current.removeEventListener('touchstart', touchStart);\n        ref.current.removeEventListener('touchmove', touchMove);\n        ref.current.removeEventListener('touchend', touchEnd);\n        ref.current.addEventListener('click', onClick);\n      };\n    }\n  }, [data, pid, ref.current]);\n  if (error) return __jsx(\"div\", null, error.message);\n  return !pid || pid === '' ? null : __jsx(S.PList, {\n    ref: ref,\n    onMouseEnter: () => setHover(true),\n    onMouseLeave: () => setHover(false),\n    $active: active || hover\n  }, data ? __jsx(React.Fragment, null, __jsx(S.PlistName, {\n    $hover: hover || active\n  }, __jsx(\"span\", null, data.name)), __jsx(S.CoverArt, {\n    $hover: hover || active,\n    src: data.images[0].url,\n    width: '120' || data.images[0].width\n  })) : __jsx(S.PlistName, {\n    $hover: hover || active\n  }, __jsx(\"span\", null, 'Loading...')));\n}","map":null,"metadata":{},"sourceType":"module"}