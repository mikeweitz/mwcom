{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\n// @flow\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport * as S from './styled-elements';\nimport useSWR from 'swr';\nimport Link from 'next/link';\n\nvar fetcher = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var res, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            data = _context.sent;\n\n            if (!(res.status !== 200)) {\n              _context.next = 8;\n              break;\n            }\n\n            throw new Error(data.message);\n\n          case 8:\n            return _context.abrupt(\"return\", data);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetcher(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default function Playlist(_ref2) {\n  var pid = _ref2.pid,\n      active = _ref2.active,\n      handler = _ref2.handler;\n\n  if (!pid) {\n    return null;\n  }\n\n  var _useState = useState(active),\n      hover = _useState[0],\n      setHover = _useState[1];\n\n  var ref = useRef(null);\n\n  var touchStart = function touchStart(e) {\n    setHover(true);\n    e.stopPropagation();\n  };\n\n  var touchEnd = function touchEnd(e) {\n    setHover(false);\n    e.stopPropagation();\n  };\n\n  var touchMove = function touchMove(e) {\n    e.stopPropagation();\n  };\n\n  var onClick = function onClick() {\n    handler(pid);\n  };\n\n  var _useSWR = useSWR(function () {\n    return \"/api/spotify/\".concat(pid);\n  }, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  useEffect(function () {\n    if (ref && ref.current && typeof ref.current !== null) {\n      ref.current.addEventListener('touchstart', touchStart);\n      ref.current.addEventListener('touchmove', touchMove);\n      ref.current.addEventListener('touchend', touchEnd);\n      ref.current.addEventListener('click', onClick);\n      return function () {\n        ref.current.removeEventListener('touchstart', touchStart);\n        ref.current.removeEventListener('touchmove', touchMove);\n        ref.current.removeEventListener('touchend', touchEnd);\n        ref.current.addEventListener('click', onClick);\n      };\n    }\n  }, [data, pid, ref.current]);\n  if (error) return __jsx(\"div\", null, error.message);\n  return !pid || pid === '' ? null : __jsx(S.PList, {\n    ref: ref,\n    onMouseEnter: function onMouseEnter() {\n      return setHover(true);\n    },\n    onMouseLeave: function onMouseLeave() {\n      return setHover(false);\n    },\n    $active: active || hover\n  }, data ? __jsx(React.Fragment, null, __jsx(S.PlistName, {\n    $hover: hover || active\n  }, __jsx(\"span\", null, data.name)), __jsx(S.CoverArt, {\n    $hover: hover || active,\n    src: data.images[0].url,\n    width: '120' || data.images[0].width\n  })) : __jsx(S.PlistName, {\n    $hover: hover || active\n  }, __jsx(\"span\", null, 'Loading...')));\n}","map":null,"metadata":{},"sourceType":"module"}