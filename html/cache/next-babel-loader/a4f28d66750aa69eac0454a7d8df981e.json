{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useLayoutEffect, useContext, useState } from 'react';\nimport * as S from './styled-elements';\nimport { Container } from '../../styles/grid';\nimport { copy } from '../../data';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport { useScrollContext } from '../scrollContext';\n\nvar Title = function Title(_ref) {\n  var name = _ref.name,\n      small = _ref.small;\n  var parts = name.split(' ');\n  return __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(S.TitleLink, null, __jsx(S.Title, {\n    $small: small\n  }, parts.map(function (str, n) {\n    var name = str.split('');\n    return __jsx(React.Fragment, {\n      key: \"header_title_\".concat(small).concat(n)\n    }, __jsx(S.Initial, null, name.shift()), !small && name.join(''), !small && n < str.length + 1 && ' ');\n  }))));\n};\n\nvar Header = function Header() {\n  var scroll = useScrollContext();\n\n  var _useState = useState(false),\n      showMenu = _useState[0],\n      setShowMenu = _useState[1];\n\n  var timer = null;\n\n  var toggleMenu = function toggleMenu() {};\n\n  var handleMenu = function handleMenu() {\n    if (['animateIn', 'animateOut'].includes(showMenu)) {\n      return false;\n    }\n\n    var newState = showMenu === 'in' ? 'animateOut' : 'animateIn';\n    var finalState = showMenu === 'in' ? 'out' : 'in';\n    setShowMenu(newState);\n    setTimeout(function () {\n      return setShowMenu(finalState);\n    }, 2000);\n  };\n\n  var renderLinks = function renderLinks() {\n    var _copy$header = copy.header,\n        title = _copy$header.title,\n        email = _copy$header.email,\n        github = _copy$header.github,\n        linkedin = _copy$header.linkedin,\n        playlists = _copy$header.playlists;\n    return __jsx(S.NavWrap, {\n      $showMenu: showMenu\n    }, __jsx(S.StyledLink, {\n      href: \"#\"\n    }, __jsx(S.LinkSpan, null, email.address + email.domain)), __jsx(S.StyledLink, {\n      href: github.url\n    }, __jsx(S.LinkSpan, null, github.text)), __jsx(S.StyledLink, {\n      href: linkedin.url\n    }, __jsx(S.LinkSpan, null, linkedin.text)), __jsx(Link, {\n      href: playlists.url\n    }, __jsx(S.StyledLink, null, __jsx(S.LinkSpan, null, playlists.text))));\n  };\n\n  var title = copy.header.title;\n  return __jsx(S.Heading, {\n    id: \"header\",\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.Overflow, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.MenuButton, {\n    onClick: function onClick() {\n      return setShowMenu(!showMenu);\n    }\n  }, __jsx(S.MenuDotOne, {\n    key: 'menu-dot-one',\n    $active: showMenu\n  }), __jsx(S.MenuDotTwo, {\n    key: 'menu-dot-two',\n    $active: showMenu\n  }), __jsx(S.MenuDotThree, {\n    key: 'menu-dot-three',\n    $active: showMenu\n  })), __jsx(S.PageTop, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(Title, {\n    name: title\n  }), renderLinks()), __jsx(S.PageScrolled, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(Title, {\n    small: true,\n    name: title\n  }), renderLinks()), __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(S.Logo, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.Img, {\n    src: \"/static/logo.png\"\n  })))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}