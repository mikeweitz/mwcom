{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useLayoutEffect, useContext, useState } from 'react';\nimport * as S from './styled-elements';\nimport { Container } from '../../styles/grid';\nimport { copy } from '../../data';\nimport dynamic from 'next/dynamic';\nimport Link from 'next/link';\nimport Head from 'next/head';\nimport { useScrollContext } from '../scrollContext';\n\nconst Title = ({\n  name,\n  small\n}) => {\n  const parts = name.split(' ');\n  return __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(S.TitleLink, null, __jsx(S.Title, {\n    $small: small\n  }, parts.map((str, n) => {\n    const name = str.split('');\n    return __jsx(React.Fragment, {\n      key: `header_title_${small}${n}`\n    }, __jsx(S.Initial, null, name.shift()), !small && name.join(''), !small && n < str.length + 1 && ' ');\n  }))));\n};\n\nconst Header = () => {\n  const scroll = useScrollContext();\n  const {\n    0: showMenu,\n    1: setShowMenu\n  } = useState(false);\n  const timer = null;\n\n  const toggleMenu = () => {};\n\n  const handleMenu = () => {\n    if (['animateIn', 'animateOut'].includes(showMenu)) {\n      return false;\n    }\n\n    const newState = showMenu === 'in' ? 'animateOut' : 'animateIn';\n    const finalState = showMenu === 'in' ? 'out' : 'in';\n    setShowMenu(newState);\n    setTimeout(() => setShowMenu(finalState), 2000);\n  };\n\n  const renderLinks = () => {\n    const {\n      header: {\n        title,\n        email,\n        github,\n        linkedin,\n        playlists\n      }\n    } = copy;\n    return __jsx(S.NavWrap, {\n      $showMenu: showMenu\n    }, __jsx(S.StyledLink, {\n      href: \"#\"\n    }, __jsx(S.LinkSpan, null, email.address + email.domain)), __jsx(S.StyledLink, {\n      href: github.url\n    }, __jsx(S.LinkSpan, null, github.text)), __jsx(S.StyledLink, {\n      href: linkedin.url\n    }, __jsx(S.LinkSpan, null, linkedin.text)), __jsx(Link, {\n      href: playlists.url\n    }, __jsx(S.StyledLink, null, __jsx(S.LinkSpan, null, playlists.text))));\n  };\n\n  const {\n    header: {\n      title\n    }\n  } = copy;\n  return __jsx(S.Heading, {\n    id: \"header\",\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.Overflow, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.MenuButton, {\n    onClick: () => setShowMenu(!showMenu)\n  }, __jsx(S.MenuDotOne, {\n    key: 'menu-dot-one',\n    $active: showMenu\n  }), __jsx(S.MenuDotTwo, {\n    key: 'menu-dot-two',\n    $active: showMenu\n  }), __jsx(S.MenuDotThree, {\n    key: 'menu-dot-three',\n    $active: showMenu\n  })), __jsx(S.PageTop, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(Title, {\n    name: title\n  }), renderLinks()), __jsx(S.PageScrolled, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(Title, {\n    small: true,\n    name: title\n  }), renderLinks()), __jsx(Link, {\n    href: \"/\",\n    passHref: true\n  }, __jsx(S.Logo, {\n    $scrolled: scroll.isScrolled\n  }, __jsx(S.Img, {\n    src: \"/static/logo.png\"\n  })))));\n};\n\nexport default Header;","map":null,"metadata":{},"sourceType":"module"}