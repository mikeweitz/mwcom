{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// @flow\nimport React, { Component } from 'react';\nimport * as S from './styled-elements'; // type ProjectT = {\n//   title: string,\n//   subtitle?: string,\n//   link: {\n//     url?: String,\n//     title?: String,\n//   },\n//   summary: Array<string>,\n//   stack: Array<string>\n// }\n\nclass Project extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    const {\n      title,\n      link,\n      subtitle,\n      summary,\n      stack\n    } = this.props;\n    const slug = title.replace(/\\s/g, '');\n    return !title ? null : __jsx(S.Article, _extends({}, link.url ? {\n      href: link.url,\n      target: '_blank',\n      title: link.title\n    } : {}, {\n      $hasLink: !!link.url\n    }), __jsx(S.Strong, null, title), __jsx(S.Subtitle, null, subtitle), summary.map((paragraph, i) => __jsx(S.P, {\n      key: `${slug}-p-${i}`\n    }, paragraph)), __jsx(S.Em, null, stack.join(' / ')));\n  }\n\n}\n\n_defineProperty(Project, \"defaultProps\", {\n  title: '',\n  subtitle: '',\n  link: {\n    url: undefined\n  },\n  summary: [],\n  stack: []\n});\n\nexport default Project;","map":null,"metadata":{},"sourceType":"module"}