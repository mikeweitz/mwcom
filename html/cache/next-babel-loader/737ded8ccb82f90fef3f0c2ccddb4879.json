{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\n// @flow\nimport React, { Component } from 'react';\nimport * as S from './styled-elements'; // type ProjectT = {\n//   title: string,\n//   subtitle?: string,\n//   link: {\n//     url?: String,\n//     title?: String,\n//   },\n//   summary: Array<string>,\n//   stack: Array<string>\n// }\n\nvar Project = /*#__PURE__*/function (_Component) {\n  _inherits(Project, _Component);\n\n  var _super = _createSuper(Project);\n\n  function Project() {\n    _classCallCheck(this, Project);\n\n    return _super.call(this);\n  }\n\n  _createClass(Project, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          link = _this$props.link,\n          subtitle = _this$props.subtitle,\n          summary = _this$props.summary,\n          stack = _this$props.stack;\n      var slug = title.replace(/\\s/g, '');\n      return !title ? null : __jsx(S.Article, _extends({}, link.url ? {\n        href: link.url,\n        target: '_blank',\n        title: link.title\n      } : {}, {\n        $hasLink: !!link.url\n      }), __jsx(S.Strong, null, title), __jsx(S.Subtitle, null, subtitle), summary.map(function (paragraph, i) {\n        return __jsx(S.P, {\n          key: \"\".concat(slug, \"-p-\").concat(i)\n        }, paragraph);\n      }), __jsx(S.Em, null, stack.join(' / ')));\n    }\n  }]);\n\n  return Project;\n}(Component);\n\n_defineProperty(Project, \"defaultProps\", {\n  title: '',\n  subtitle: '',\n  link: {\n    url: undefined\n  },\n  summary: [],\n  stack: []\n});\n\nexport default Project;","map":null,"metadata":{},"sourceType":"module"}